'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _jimp = require('jimp');

var _jimp2 = _interopRequireDefault(_jimp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _class = function () {
  function _class() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, _class);

    this.options = options;

    if (!(options.width && options.height)) throw new Error('Please specify width and height of the marker image.');

    this.coord = this.options.coord;
    this.img = this.options.img;
    this.offsetX = this.options.offsetX || options.width / 2;
    this.offsetY = this.options.offsetY || options.height;
    this.offset = [this.offsetX, this.offsetY];
    this.height = this.options.height;
    this.width = this.options.width;
  }

  /**
   * Load icon image from fs or remote request
   */


  (0, _createClass3.default)(_class, [{
    key: 'load',
    value: function load() {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _jimp2.default.read(_this.img, function (err, tile) {
          if (err) reject(err);
          _this.imgData = tile;
          resolve(true);
        });
      });
    }

    /**
     *  Set icon data
     */

  }, {
    key: 'set',
    value: function set(img) {
      this.imgData = img;
    }
  }, {
    key: 'extentPx',
    value: function extentPx() {
      return [this.offset[0], this.height - this.offset[1], this.width - this.offset[0], this.offset[1]];
    }
  }]);
  return _class;
}();

exports.default = _class;