'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _jimp = require('jimp');

var _jimp2 = _interopRequireDefault(_jimp);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Image = function () {
  function Image() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, Image);

    this.options = options;
    this.width = this.options.width;
    this.height = this.options.height;
    this.quality = this.options.quality || 100;
  }

  (0, _createClass3.default)(Image, [{
    key: 'draw',
    value: function draw(tiles) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var key = 0;
        var img = new _jimp2.default(_this.width, _this.height, function (err, image) {
          if (err) reject(err);
          _this.image = image;
          tiles.forEach(function (data) {
            _jimp2.default.read(data.body, function (errRead, tile) {
              if (errRead) reject(errRead);

              var x = data.box[0];
              var y = data.box[1];
              var sx = x < 0 ? 0 : x;
              var sy = y < 0 ? 0 : y;
              var dx = x < 0 ? -x : 0;
              var dy = y < 0 ? -y : 0;
              var extraWidth = x + (tile.bitmap.width - _this.width);
              var extraHeight = y + (tile.bitmap.width - _this.height);
              var w = tile.bitmap.width + (x < 0 ? x : 0) - (extraWidth > 0 ? extraWidth : 0);
              var h = tile.bitmap.height + (y < 0 ? y : 0) - (extraHeight > 0 ? extraHeight : 0);

              img.blit(tile, sx, sy, dx, dy, w, h);
              _this.image = image;

              if (key === tiles.length - 1) resolve(true);
              key++;
            });
          });
        });
      });
    }

    /**
     * Save image to file
     */

  }, {
    key: 'save',
    value: function save(fileName, cb) {
      var _this2 = this;

      if (_lodash._.isFunction(cb)) {
        this.image.quality(this.quality).write(fileName, cb);
      } else {
        return new _promise2.default(function (resolve) {
          _this2.image.quality(_this2.quality).write(fileName, function () {
            resolve();
          });
        });
      }
      return null;
    }

    /**
     * Return image as buffer
     */

  }, {
    key: 'buffer',
    value: function buffer(mime, cb) {
      var _this3 = this;

      if (_lodash._.isFunction(cb)) {
        this.image.getBuffer(mime, cb);
      } else {
        return new _promise2.default(function (resolve, reject) {
          _this3.image.getBuffer(mime || 'image/png', function (err, result) {
            if (err) reject(err);else resolve(result);
          });
        });
      }
      return null;
    }
  }]);
  return Image;
}();

exports.default = Image;


module.exports = Image;