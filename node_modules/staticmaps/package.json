{
  "_args": [
    [
      {
        "raw": "staticmaps@latest",
        "scope": null,
        "escapedName": "staticmaps",
        "name": "staticmaps",
        "rawSpec": "latest",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Emerson/Documents/WebDev/holomap_server"
    ]
  ],
  "_from": "staticmaps@latest",
  "_id": "staticmaps@0.7.0",
  "_inCache": true,
  "_location": "/staticmaps",
  "_nodeVersion": "9.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/staticmaps_0.7.0_1520928139312_0.14772116776692323"
  },
  "_npmUser": {
    "name": "stephangeorg",
    "email": "s.georg@nearest.place"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "staticmaps@latest",
    "scope": null,
    "escapedName": "staticmaps",
    "name": "staticmaps",
    "rawSpec": "latest",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/staticmaps/-/staticmaps-0.7.0.tgz",
  "_shasum": "085017ef8a14b0ceab17009153fe5cb3eba31c89",
  "_shrinkwrap": null,
  "_spec": "staticmaps@latest",
  "_where": "/Users/Emerson/Documents/WebDev/holomap_server",
  "author": {
    "name": "Stephan Georg",
    "email": "s.georg@nearest.place"
  },
  "babel": {
    "plugins": [
      "transform-runtime"
    ]
  },
  "bugs": {
    "url": "https://github.com/StephanGeorg/staticmaps/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.26.0",
    "gm": "^1.23.0",
    "jimp": "^0.2.27",
    "lodash": "^4.17.4",
    "request": "^2.79.0",
    "request-promise": "^4.1.1"
  },
  "description": "A node.js library for creating map images with polylines and markers.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-plugin-transform-async-to-generator": "^6.24.1",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-stage-2": "^6.24.1",
    "babel-register": "^6.26.0",
    "chai": "^4.1.2",
    "mocha": "^4.0.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-ewlXXF/+DQ3R5kqWJL7ppA9MujEk689EUcNJOMlIlu62TR8dngXElkddC2zm6Qgqo1WZ+1zJZioauZnQWgH+aw==",
    "shasum": "085017ef8a14b0ceab17009153fe5cb3eba31c89",
    "tarball": "https://registry.npmjs.org/staticmaps/-/staticmaps-0.7.0.tgz",
    "fileCount": 16,
    "unpackedSize": 380075
  },
  "gitHead": "fe5792660e5cd29936ab972f0d6d5eb335b0c1ed",
  "homepage": "https://github.com/StephanGeorg/staticmaps#readme",
  "keywords": [
    "openstreetmap",
    "osm",
    "staticmaps",
    "staticmap",
    "map",
    "maps"
  ],
  "license": "ISC",
  "main": "./dist/index.js",
  "maintainers": [
    {
      "name": "stephangeorg",
      "email": "s.georg@nearest.place"
    }
  ],
  "name": "staticmaps",
  "optionalDependencies": {},
  "readme": "# StaticMaps [![npm version](https://badge.fury.io/js/staticmaps.svg)](https://badge.fury.io/js/staticmaps)\nA node.js library for creating map images with polylines and markers. This library is a node.js implementation of [Static Map](https://github.com/komoot/staticmap).\n\n![Map with polyline](https://stephangeorg.github.io/staticmaps/sample/polyline.png?raw=true=800x280)\n\n## Installation\n\nImage manupulation is based on [GraphicsMagick](http://www.graphicsmagick.org/). You **need to [install](http://www.graphicsmagick.org/README.html#documentation) it before** using staticmaps.\n\n```bash\n> npm i staticmaps -S\n```\n## Getting Started\n\n### Initialization ###\n```javascript\nconst StaticMaps = require('staticmaps');\n```\n```javascript\nconst options = {\n  width: 600,\n  height: 400\n};\nconst map = new StaticMaps(options);\n```\n#### Map options\nParameter           | Description\n------------------- | -------------\nwidth               | Width of the output image in px\nheight              | Height of the output image in px\nquality             | (optional) Set quality of output JPEG, 0 - 100 (default: 100)\npaddingX            | (optional) Minimum distance in px between map features and map border\npaddingY            | (optional) Minimum distance in px between map features and map border\ntileUrl             | (optional) Tile server URL for the map base layer\ntileSize            | (optional) tile size in pixel (default: 256)\ntileRequestTimeout  | (optional) timeout for the tiles request\nimageMagick         | (optional) Use ImageMagick instead of GraphicsMagick (default: false)\n\n### Methods\n#### addMarker (options)\nAdds a marker to the map.\n##### Marker options\nParameter           | Description\n------------------- | -------------\ncoord               | Coordinates of the marker ([Lng, Lat])\nimg                 | Marker image path or URL\nheight              | Height of the marker image\nwidth               | Width of the marker image\noffsetX             | (optional) X offset of the marker image (default: width/2)\noffsetY             | (optional) Y offset of the marker image (default: height)\n##### Usage example\n```javascript\nconst marker = {\n  img: `${__dirname}/marker.png`, // can also be a URL\n  offsetX: 24,\n  offsetY: 48,\n  width: 48,\n  height: 48,\n  coord = [13.437524,52.4945528]\n};\nmap.addMarker(marker);\n```\n***\n#### addLine (options)\nAdds a polyline to the map.\n##### Polyline options\nParameter           | Description\n------------------- | -------------\ncoord               | Coordinates of the polyline ([[Lng, Lat], ... ,[Lng, Lat]])\ncolor               | Stroke color of the polyline (Default: '#000000BB')\nwidth               | Stroke width of the polyline (Default: 3)\nsimplify            | TODO\n##### Usage example\n```javascript\n  const polyline = {\n    coords: [\n      [13.399259,52.482659],\n      [13.387849,52.477144],\n      [13.40538,52.510632]\n    ],\n    color: '#0000FFBB',\n    width: 3\n  };\n\n  map.addLine(polyline);\n```\n***\n\n#### addPolygon(options)\nAdds a polygon to the map. Polygon is the same as a polyline but first and last coordinate are equal.\n```\nmap.addPolygon(options);\n```\n##### Polygon options\nParameter           | Description\n------------------- | -------------\ncoord               | Coordinates of the polygon ([[Lng, Lat], ... ,[Lng, Lat]])\ncolor               | Stroke color of the polygon (Default: '#000000BB')        \nwidth               | Stroke width of the polygon (Default: 3)\nfill                | Fill color of the polygon (Default: '#000000BB')\nsimplify            | TODO\n##### Usage example\n```javascript\n  const polygon = {\n    coords: [\n      [13.399259,52.482659],\n      [13.387849,52.477144],\n      [13.40538,52.510632],\n      [13.399259,52.482659]\n    ],\n    color: '#0000FFBB',\n    width: 3\n  };\n\n  map.addPolygon(polygon);\n```\n***\n\n#### render (center, zoom)\nRenders the map.\n```\nmap.render();\n```\n##### Render options\nParameter           | Description\n------------------- | -------------\ncenter              | (optional) Set center of map to a specific coordinate ([Lng, Lat])\nzoom                | (optional) Set a specific zoom level.      \n\n***\n\n#### image.save (fileName, [callback])\nSaves the image to a file. If callback is undefined it return a Promise.\n```\nmap.image.save();\n```\n##### Save options\nParameter           | Description\n------------------- | -------------\nfileName            | Name of the output file. Specify output format (png, jpg) by adding file extension.\ncallback            | (optional) Callback function. If undefined, Promise will returned.    \n\n***\n\n#### image.buffer (mime, [callback])\nSaves the image to a file. If callback is undefined it return a Promise.\n```\nmap.image.buffer();\n```\n##### Buffer options\nParameter           | Description\n------------------- | -------------\nmime                | Mime type of the output buffer (default: 'image/png')\ncallback            | (optional) Callback function. If undefined, Promise will returned.   \n\n## Usage Examples\n\n### Simple map w/ zoom and center\n```javascript\nconst zoom = 13;\nconst center = [13.437524,52.4945528];\n\nmap.render(center, zoom)\n  .then(() => map.image.save('center.png'))  \n  .then(() => console.log('File saved!'))\n  .catch(function(err) { console.log(err); });\n```\n#### Output\n![Map with zoom and center](https://stephangeorg.github.io/staticmaps/sample/center.png)\n\n### Simple map with bounding box\n\nIf specifying a bounding box instead of a center, the optimal zoom will be calculated.\n\n```javascript\nconst bbox = [\n  11.414795,51.835778,  // lng,lat of first point\n  11.645164,51.733833   // lng,lat of second point, ...\n];\n\nmap.render(bbox)\n  .then(() => map.image.save('bbox.png'))  \n  .then(() => console.log('File saved!'))\n  .catch(console.log);\n```\n#### Output\n![Map with bbox](https://stephangeorg.github.io/staticmaps/sample/bbox.png)\n\n***\n\n### Map with single marker\n\n```javascript\nconst marker = {\n  img: `${__dirname}/marker.png`, // can also be a URL,\n  offsetX: 24,\n  offsetY: 48,\n  width: 48,\n  height: 48,\n  coord: [13.437524, 52.4945528],\n };\nmap.addMarker(marker);\nmap.render()\n  .then(() => map.image.save('single-marker.png'))\n  .then(() => { console.log('File saved!'); })\n  .catch(console.log);\n```\nYou're free to specify a center as well, otherwise the marker will be centered.\n\n#### Output\n![Map with marker](https://stephangeorg.github.io/staticmaps/sample/marker.png)\n\n***\n\n### Map with multiple marker\n```javascript\nconst marker = {\n  img: `${__dirname}/marker.png`, // can also be a URL\n  offsetX: 24,\n  offsetY: 48,\n  width: 48,\n  height: 48\n};\n\nmarker.coord = [13.437524,52.4945528];\nmap.addMarker(marker);\nmarker.coord = [13.430524,52.4995528];\nmap.addMarker(marker);\nmarker.coord = [13.410524,52.5195528];\nmap.addMarker(marker);\n\nmap.render()\n  .then(() => map.image.save('multiple-marker.png'))\n  .then(() => { console.log('File saved!'); })\n  .catch(console.log);\n\n```\n#### Output\n![Map with multiple markers](https://stephangeorg.github.io/staticmaps/sample/multiple-marker.png?raw=true)\n\n***\n\n### Map with polyline\n```javascript\n\nvar line = {\n  coords: [\n    [13.399259,52.482659],\n    [13.387849,52.477144],\n    [13.40538,52.510632]\n  ],\n  color: '#0000FFBB',\n  width: 3\n};\n\nmap.addLine(line);\nmap.render()\n  .then(() => map.image.save('test/out/polyline.png')\n  .then(() => console.log('File saved!'))\n  .catch(console.log);\n\n```\n#### Output\n![Map with polyline](https://stephangeorg.github.io/staticmaps/sample/polyline.png?raw=true=800x280)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/StephanGeorg/staticmaps.git"
  },
  "scripts": {
    "build": "babel src -d dist",
    "prepublish": "npm run build",
    "serve": "node dist/index.js",
    "start": "nodemon lib/index.js --exec babel-node --presets es2015,stage-2",
    "test": "mocha --require babel-register"
  },
  "version": "0.7.0"
}
